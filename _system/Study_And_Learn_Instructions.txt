🎓 Study & Learn Project – Instructions (Version 1.0)

---

## 🧭 Purpose

A dedicated project for developing practical coding and game‑dev skills using C#, Unity, Codex, and the OpenAI Agents SDK.  The project adapts to your current knowledge, teaches through building, and records your progress automatically.

---

## 🧱 Structure

**Main Files**

```
Study_And_Learn/
 ├── Instructions_Study_And_Learn.txt  ← this file
 ├── Lesson_Tracker.txt                ← progress log per topic
 ├── Study_Log.txt                     ← reflections + notes
 ├── Lessons/                          ← each module (C#, Unity, Codex, Design)
     ├── CSharp_Basics_1.txt
     ├── CSharp_ControlFlow_2.txt
     ├── CSharp_Classes_3.txt
     ├── Unity_Intro_1.txt
     └── etc…
```

**Commands / Flow**

* `run lesson` – start a new lesson (AI selects next or you choose manually)
* `submit assignment` – paste your code or short answer
* `evaluate lesson` – get feedback, score, and suggestions
* `save study log` – archive reflection and progress

---

## 🧩 Adaptive Lesson Flow

1. **Pre‑Test (Diagnostic)** → quick questions to gauge prior knowledge.
2. **Core Lesson** → concise explanation + examples + demo prompts.
3. **Guided Practice** → small project or coding challenge.
4. **Post‑Test (Mastery Check)** → confirms understanding before advancing.
5. **Reflection Log** → short written takeaway (auto‑saved in Study_Log).

**Mastery Rules**

* ≥80% → advance to next lesson.
* 60–79% → booster mini‑lesson.
* <60% → review before continuing.

---

## 🧠 Learning Tracks

| Track                 | Focus                                    | Outcome                              |
| --------------------- | ---------------------------------------- | ------------------------------------ |
| **C# Fundamentals**   | Syntax, data types, loops, classes.      | Build small console programs.        |
| **Unity Development** | Scenes, GameObjects, scripting, prefabs. | Create playable mini‑games.          |
| **Codex & Agents**    | Prompting, debugging, tool building.     | Use Codex to accelerate development. |
| **Design Theory**     | Game loops, feedback, pacing.            | Design documents and system maps.    |

---

## 🪜 Level Map

1️⃣ **C# Apprentice** → complete core syntax and logic.
2️⃣ **Unity Explorer** → manipulate scenes and scripts.
3️⃣ **Codex Collaborator** → use Codex/AgentKit productively.
4️⃣ **Systems Designer** → integrate gameplay loops and balance.
5️⃣ **Game Builder** → ship a small prototype or app.

---

## 🧾 Lesson 1 – C# Basics (Variables & Types)

**Pre‑Test**

1. What keyword declares an integer?
2. Predict output: `int x = 3 + 4 * 2; Console.WriteLine(x);`
3. What is string concatenation?
4. Declare a float named speed set to 2.5.

**Lesson Core**

* Data types: `int`, `float`, `bool`, `string`.
* Declaring & assigning variables.
* Type conversion (`(int)`, `ToString()`).
* Input/output via `Console.ReadLine()` and `Console.WriteLine()`.

**Guided Practice**
Write a console program that asks for a player’s name and score and prints:
`Hello [name], your score is [score].`

**Post‑Test**

1. Explain difference between `int` and `float`.
2. What happens if you add a string and an int?
3. Predict output: `int x = 5; x += 2; Console.WriteLine(x);`
4. Write code to swap values of two variables `a` and `b`.

**Reflection Prompt**

* What felt easy? What was fuzzy? How might these concepts apply in Unity scripts?

---

## 🧾 Lesson 2 – C# Control Flow

* If/else, switch, loops.
* Practice: generate a multiplication table up to 12.
* Mini‑Challenge: fizzbuzz variant (“codexbuzz”) with custom rules.

---

## 🧾 Lesson 3 – C# Classes & Objects

* Declaring classes and creating instances.
* Constructors, fields, methods.
* Guided Practice: create a `Player` class with `name`, `hp`, `score`.

---

## 🧩 Evaluation Framework

Each lesson logs:

```
LessonName | PreTest% | PostTest% | Booster? | Mastery | Date
```

The tracker tallies totals per track and updates your current Level.

---

## 📘 Reflection Prompts

After each session:

* What concept became clearer?
* What frustrated or surprised you?
* How could you use this in a future Unity or Codex project?

---

**End of Instructions – Study & Learn Project v1.0**
